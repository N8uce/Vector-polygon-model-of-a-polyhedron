# control.h task.hpp
!control.cpp control.h graphics.h keys_n_colors.h #<#>
!main.cpp control.h exception graphics.h initializer_list keys_n_colors.h new stddef.h task.hpp type_traits typeinfo utility vector #<#>
!task.cpp cctype cerrno clocale cmath cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception fstream graphics.h initializer_list ios iosfwd iostream istream keys_n_colors.h limits limits.h locale.h math.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error task.hpp type_traits typeinfo utility vector wchar.h wctype.h #<#>
!task.hpp exception initializer_list new stddef.h type_traits typeinfo utility vector #<#>
 struct@Control _type_ #<control.h>
F : Figure #<main.cpp>
Figure _type_ #<task.hpp>
Figure(double*) #<task.hpp>
_USE_MATH_DEFINES #<task.cpp>
c : double[] #<main.cpp>
control_values : enum #<control.h>
controls : Control[] #<control.cpp>
create_control(int i, int left, int top, const char* file_name) -> void #<control.cpp>
create_control(int, int, int, const char*) -> void #<control.h>
goC() -> void #<main.cpp>
height #<task.cpp>
main() -> int #<main.cpp>
point : int[] #<task.cpp>
save() -> void #<task.hpp>
select_control() -> int #<control.h>
width #<task.cpp>
	Control::left : int #<control.h>
	Control::top : int #<control.h>
	Control::right : int #<control.h>
	Control::bottom : int #<control.h>
	Figure:%center : double[] #<task.hpp>
	Figure:%n_vertex : int #<task.hpp>
	Figure:%n_face : int #<task.hpp>
	Figure:%vertex : vector #<task.hpp>
	Figure:%face : vector #<task.hpp>
	Figure::rotate(int) -> void #<task.hpp>
	Figure::shift(int) -> void #<task.hpp>
	Figure::drawXY() -> void #<task.hpp>
	Figure::drawXZ() -> void #<task.hpp>
	Figure::drawYZ() -> void #<task.hpp>
